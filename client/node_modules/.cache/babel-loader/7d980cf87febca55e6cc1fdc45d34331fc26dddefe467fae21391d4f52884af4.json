{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const landingSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    counter: 10\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.counter += 1;\n    },\n    incrementBy: (state, action) => {\n      console.log(action);\n      if (action.payload !== \"\") {\n        state.counter += parseInt(action.payload);\n      } else {\n        state.counter = 0;\n      }\n    },\n    decrement: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.counter -= 1;\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementBy\n} = landingSlice.actions;","map":{"version":3,"names":["createSlice","landingSlice","name","initialState","counter","reducers","increment","state","incrementBy","action","console","log","payload","parseInt","decrement","actions"],"sources":["/home/lili/Descargas/PI-Dogs/client/src/store/slices/landingSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const landingSlice = createSlice({\n    name: 'counter',\n    initialState:{\n      counter: 10,\n    },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.counter += 1\n    },\n    incrementBy: (state,action) => {\n      console.log(action)\n      if(action.payload !== \"\"){\n      state.counter += parseInt(action.payload)}else{\n        state.counter = 0\n      }\n    },\n    decrement: (state) => {\n        // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        // doesn't actually mutate the state because it uses the Immer library,\n        // which detects changes to a \"draft state\" and produces a brand new\n        // immutable state based off those changes\n        state.counter -= 1\n      },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement,incrementBy} = landingSlice.actions"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAC;IACXC,OAAO,EAAE;EACX,CAAC;EACHC,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACH,OAAO,IAAI,CAAC;IACpB,CAAC;IACDI,WAAW,EAAEA,CAACD,KAAK,EAACE,MAAM,KAAK;MAC7BC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,IAAGA,MAAM,CAACG,OAAO,KAAK,EAAE,EAAC;QACzBL,KAAK,CAACH,OAAO,IAAIS,QAAQ,CAACJ,MAAM,CAACG,OAAO,CAAC;MAAA,CAAC,MAAI;QAC5CL,KAAK,CAACH,OAAO,GAAG,CAAC;MACnB;IACF,CAAC;IACDU,SAAS,EAAGP,KAAK,IAAK;MAClB;MACA;MACA;MACA;MACAA,KAAK,CAACH,OAAO,IAAI,CAAC;IACpB;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEE,SAAS;EAAEQ,SAAS;EAACN;AAAW,CAAC,GAAGP,YAAY,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}